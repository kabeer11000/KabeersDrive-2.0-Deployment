{"version":3,"sources":["components/FolderView/FolderView.lazy.js","views/HomeComponent/HomeComponent.lazy.js","components/AppBarComponent/AppBarComponent.lazy.js","components/DrawerComponent/DrawerComponent.lazy.js","components/FileViewer/FileViewer.lazy.js","components/SharedFolderView/SharedFolderView.lazy.js","App.js","serviceWorker.js","index.js","components/Preloader/Preloader.js","contexts/Contexts.js"],"names":["LazyFolderView","lazy","FolderView","props","fallback","LazyHomeComponent","HomeComponent","Preloader","LazyAppBarComponent","AppBarComponent","LazyDrawerComponent","DrawerComponent","LazyFileViewer","FileViewer","LazySharedFolderView","SharedFolderView","useStyles","makeStyles","theme","root","backgroundColor","palette","background","paper","width","position","minHeight","fab","bottom","spacing","right","App","React","useState","appBarTitle","filesUploading","state","setState","stateFunctions","title","setTitle","t","setFilesUploading","files","createMuiTheme","type","maxSnack","CssBaseline","Fragment","path","exact","render","component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","document","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","className","style","height","top","left","transform","defaultProps","pure","DrawerContext","createContext","DrawerProvider","children","drawerOpen","handleDrawer","Provider","value","SearchingContext","SearchingProvider","searching","setSearching"],"mappings":"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","file":"static/js/main.385f1a44.chunk.js","sourcesContent":["import React, {lazy, Suspense} from 'react';\nimport Preloader from \"../Preloader/Preloader\";\n\nconst LazyFolderView = lazy(() => import('./FolderView'));\n\nconst FolderView = props => (\n    <Suspense fallback={<Preloader/>}>\n        <LazyFolderView {...props} />\n    </Suspense>\n);\n\nexport default FolderView;\n","import React, {lazy, Suspense} from 'react';\nimport Preloader from \"../../components/Preloader/Preloader\";\n\nconst LazyHomeComponent = lazy(() => import('./HomeComponent'));\n\nconst HomeComponent = props => (\n    <Suspense fallback={<Preloader/>}>\n        <LazyHomeComponent {...props} />\n    </Suspense>\n);\n\nexport default HomeComponent;\n","import React, {lazy, Suspense} from 'react';\n\nconst LazyAppBarComponent = lazy(() => import('./AppBarComponent'));\n\nconst AppBarComponent = props => (\n    <Suspense fallback={null}>\n        <LazyAppBarComponent {...props} />\n    </Suspense>\n);\n\nexport default AppBarComponent;\n","import React, {lazy, Suspense} from 'react';\n\nconst LazyDrawerComponent = lazy(() => import('./DrawerComponent'));\n\nconst DrawerComponent = props => (\n    <Suspense fallback={null}>\n        <LazyDrawerComponent {...props} />\n    </Suspense>\n);\n\nexport default DrawerComponent;\n","import React, {lazy, Suspense} from 'react';\n\nconst LazyFileViewer = lazy(() => import('./FileViewer'));\n\nconst FileViewer = props => (\n    <Suspense fallback={null}>\n        <LazyFileViewer {...props} />\n    </Suspense>\n);\n\nexport default FileViewer;\n","import React, {lazy, Suspense} from 'react';\n\nconst LazySharedFolderView = lazy(() => import('./SharedFolderView'));\n\nconst SharedFolderView = props => (\n    <Suspense fallback={null}>\n        <LazySharedFolderView {...props} />\n    </Suspense>\n);\n\nexport default SharedFolderView;\n","import React from 'react';\nimport './App.css';\nimport {MuiThemeProvider} from \"@material-ui/core\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport HomeComponent from \"./views/HomeComponent/HomeComponent.lazy\";\nimport AppBarComponent from \"./components/AppBarComponent/AppBarComponent.lazy\";\nimport \"bootstrap/dist/css/bootstrap-utilities.min.css\";\nimport createMuiTheme from \"@material-ui/core/styles/createMuiTheme\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport DrawerComponent from \"./components/DrawerComponent/DrawerComponent.lazy\";\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\nimport FileViewer from \"./components/FileViewer/FileViewer.lazy\";\nimport FolderView from \"./components/FolderView/FolderView.lazy\";\nimport {DialogProvider} from \"muibox\";\nimport {SnackbarProvider} from \"notistack\";\nimport SharedFolderView from \"./components/SharedFolderView/SharedFolderView.lazy\";\nimport {DrawerProvider, SearchingProvider} from \"./contexts/Contexts\";\n\n\nconst useStyles = makeStyles((theme) => ({\n    root: {\n        backgroundColor: theme.palette.background.paper,\n        width: 500,\n        position: 'relative',\n        minHeight: 200,\n    },\n    fab: {\n        position: 'fixed',\n        bottom: theme.spacing(2),\n        right: theme.spacing(2),\n    }\n}));\nconst App = (props) => {\n    const classes = useStyles();\n    const [state, setState] = React.useState({\n        appBarTitle: \"My Drive\",\n        filesUploading: [],\n    });\n    const stateFunctions = {\n        title: state.appBarTitle,\n        setTitle: (t) => setState({...state, appBarTitle: t}),\n        filesUploading: state.filesUploading,\n        setFilesUploading: (files) => setState({...state, filesUploading: [...state.filesUploading, ...files]})\n    };\n    const theme = createMuiTheme({\n        palette: {\n            type: \"dark\"\n        },\n    });\n\n    return (\n        <MuiThemeProvider theme={theme}>\n            <SnackbarProvider maxSnack={1}>\n                <CssBaseline/>\n                <Router>\n                    <DrawerProvider>\n                        <DrawerComponent {...stateFunctions}>\n                            <React.Fragment>\n                                <Route path={[\"/\", \"/home\", \"/recents\", \"/my-drive\", \"/shared\"]} exact={true}\n                                       render={() => (\n                                           <SearchingProvider>\n                                               <AppBarComponent {...stateFunctions}/>\n                                           </SearchingProvider>\n                                       )}/>\n                                <DialogProvider>\n                                    <Route exact path={[\"/\", \"/home\", \"/recents\", \"/my-drive\", \"/shared\"]}\n                                           component={HomeComponent}/>\n                                    <Route exact path={[\"/view/:id\"]} component={FileViewer}/>\n                                    <Route exact path={\"/folder/:id\"} component={FolderView}/>\n                                    <Route exact path={\"/share/:id\"} component={SharedFolderView}/>\n                                </DialogProvider>\n                                {/*\n                                <UploadComponent onClose={handleCastDialogClose} open={castDialogOpen}/>\n                                <IconButton className={\"d-none\"} onClick={() => setCastDialogOpen(!castDialogOpen)}>\n                                    <CloudUpload/>\n                                </IconButton>\n                                */}\n                            </React.Fragment>\n                        </DrawerComponent>\n                    </DrawerProvider>\n                </Router>\n            </SnackbarProvider>\n        </MuiThemeProvider>\n    );\n};\n\nexport default App;\n/*\n<Fab onClick={handleCastDialogClickOpen} className={classes.fab}>\n                        <CloudUpload/>\n                    </Fab>\n */\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <React.Fragment>\n        <App/>\n    </React.Fragment>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import React from \"react\";\r\nimport CircularProgress from \"@material-ui/core/CircularProgress\";\r\nimport {pure} from \"recompose\";\r\n\r\nconst Preloader = () => (\r\n    <div className=\"Preloader text-center\" style={{\r\n        width: \"10rem\",\r\n        height: \"10rem\",\r\n        position: \"absolute\",\r\n        top: \"50%\",\r\n        left: \"50%\",\r\n        transform: \"translate(-50%, -50%)\"\r\n    }}>\r\n        <CircularProgress/>\r\n    </div>\r\n);\r\n\r\nPreloader.propTypes = {};\r\n\r\nPreloader.defaultProps = {};\r\n\r\nexport default pure(Preloader);\r\n","import React from \"react\";\r\n\r\nexport const DrawerContext = React.createContext(false);\r\nexport const DrawerProvider = ({children}) => {\r\n    const [drawerOpen, handleDrawer] = React.useState(false);\r\n    return (\r\n        <DrawerContext.Provider value={[drawerOpen, handleDrawer]}>\r\n            {children}\r\n        </DrawerContext.Provider>\r\n    );\r\n};\r\nexport const SearchingContext = React.createContext(false);\r\nexport const SearchingProvider = ({children}) => {\r\n    const [searching, setSearching] = React.useState(false);\r\n    return (\r\n        <SearchingContext.Provider value={[searching, setSearching]}>\r\n            {children}\r\n        </SearchingContext.Provider>\r\n    )\r\n};\r\n"],"sourceRoot":""}